{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs to manage Azure ApiManagement deployment and for performing operations on entities like API, Product, Subscription associated with the deployment.",
    "version": "2016-07-07"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagement_MoveResources",
        "description": "Move resources from one resource group to another. The resources being moved should all be in the same resource group.",
        "parameters": [
          {
            "name": "sourceResourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Source resource group name.",
            "pattern": "^[-\\w\\._\\(\\)]+$",
            "minLength": 1,
            "maxLength": 90
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesMoveInfo"
            },
            "description": "move resources' parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully moved ApiManagement resources."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/managedeployments": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_ManageDeployments",
        "description": "Manage deployments of an Api Management service. This operation can be used to  Change Sku or Sku Units, Change Service Tier (Developer/Standard/Premium) and Manage Vpn Configuration. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceManageDeploymentsParameters"
            },
            "description": "Parameters supplied to ManageDeployments operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied the new deployment Configuration on the ApiManagement service.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request valdiation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The service does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Service is currently being updated.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_Restore",
        "description": "This operation restores a backup of an ApiManagement service created using ApiManagementService_Backup operation on current service. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceBackupRestoreParameters"
            },
            "description": "Parameters supplied to the Restore Api Management service from backup operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restored the backup onto the ApiManagement service.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The service does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Service is currently being updated.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_Backup",
        "description": "This operation creates a backup of the ApiManagement service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceBackupRestoreParameters"
            },
            "description": "Parameters supplied to the ApiManagementService_Backup operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully backed up the ApiManagement service to the storage account.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The service does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Service is currently being updated.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}": {
      "put": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_CreateOrUpdate",
        "description": "Creates a new API Management service or updates an existing Api Management service. This is long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCreateOrUpdateParameters"
            },
            "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The service was successfully Setup.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_Update",
        "description": "Updates an existing ApiManagement service.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCreateOrUpdateParameters"
            },
            "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the current ApiManagement service.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The service does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_Get",
        "description": "Get an Api Management service resource description.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got the ApiManagement Service Resource.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "404": {
            "description": "ApiManagement Service not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_Delete",
        "description": "Deletes existing Api Management service.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Service was successfully deleted."
          },
          "204": {
            "description": "Service is already deleted."
          },
          "404": {
            "description": "ApiManagement Service not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_ListByResourceGroup",
        "description": "List all Api Management services within a resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Api Service List.",
            "schema": {
              "$ref": "#/definitions/ApiServiceListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service/": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_ListBySubscriptionId",
        "description": "List all Api Management services within an Azure Subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Api Service List.",
            "schema": {
              "$ref": "#/definitions/ApiServiceListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/getssotoken": {
      "get": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_GetSsoToken",
        "description": "Gets the Single Sign On token for the API Management Service valid for 5 Minutes.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 OK if successful with the SSO Redirect URI.",
            "schema": {
              "$ref": "#/definitions/ApiServiceGetSsoTokenResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_CheckNameAvailability",
        "description": "Checks availability and correctness of a name for an Api Management service.",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceCheckNameAvailabilityParameters"
            },
            "description": "Parameters supplied to the CheckNameAvailability operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the result of check name availability.",
            "schema": {
              "$ref": "#/definitions/ApiServiceNameAvailabilityResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/updatecertificate": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_UploadCertificate",
        "description": "Upload Custom Domain SSL certificate for an Api Management service.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceUploadCertificateParameters"
            },
            "description": "Parameters supplied to the Upload SSL certificate for an Api Management service operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully uploaded certificate to the ApiManagement Service.",
            "schema": {
              "$ref": "#/definitions/CertificateInformation"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "ApiManagement Service not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/updatehostname": {
      "post": {
        "tags": [
          "ResourceProvider"
        ],
        "operationId": "ApiManagementService_UpdateHostname",
        "description": "This operation creates, updates or deletes a custom hostname for an ApiManagement service. The custome hostname can be applied to Proxy and Portal endpoint. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiServiceUpdateHostnameParameters"
            },
            "description": "Parameters supplied to the UpdateHostname operation."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Service was successfully updated with desired hostnames.",
            "schema": {
              "$ref": "#/definitions/ApiServiceResource"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "ApiManagement Service not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "ApiManagement Service is currently being updated.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_ListByService",
        "description": "List all APIs of the Api Management service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn781423.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged Result reponse of Apis.",
            "schema": {
              "$ref": "#/definitions/ApiPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Get",
        "description": "This operation returns the details of the API specified by its identifier.",
        "produces": [
          "application/json",
          "application/vnd.sun.wadl+xml",
          "application/vnd.swagger.doc+json",
          "application/wsdl+xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified API entity.",
            "schema": {
              "$ref": "#/definitions/ApiContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_CreateOrUpdate",
        "description": "Creates new or updates existing specific API of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "ETag of the Api Entity. For Create Api Etag should not be specified. For Update Etag should match the existing Entity or it can be * for Unconditional Update."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "API was successfully created."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "409": {
            "description": "API with same identified already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Patch",
        "description": "Patches specific API of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchParameters"
            },
            "description": "Patch parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Api Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully imported."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Delete",
        "description": "Deletes specific API of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Api Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "412": {
            "description": "Returned if the product resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations": {
      "get": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_ListByApi",
        "description": "This operation returns a collection of the operations for the specified API.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions               |\n|-------------|------------------------|-----------------------------------|\n| name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |\n| urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of operation summary entities at the API level.",
            "schema": {
              "$ref": "#/definitions/OperationPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OperationContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}": {
      "get": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Get",
        "description": "This operation returns the details of the API Operation specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the operation within the API."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Operation entity.",
            "schema": {
              "$ref": "#/definitions/OperationContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified operation does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_CreateOrUpdate",
        "description": "Creates new API operation or updates an existing one.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation.",
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationCreateOrUpdateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Operation was successfully created"
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "409": {
            "description": "Operation with same identified already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Update",
        "description": "This operation updates the details of the operation specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationCreateOrUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API Operation Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API or operation does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "412": {
            "description": "Returned if the operation resource doesn't pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiOperations"
        ],
        "operationId": "ApiOperations_Delete",
        "description": "This operation deletes the specified operation.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the Operation."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the API Operation Entity. Etag should match current Entity state or it should be * for Unconditional delete.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API or operation does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "412": {
            "description": "Returned if the operation resource doesn't pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products": {
      "get": {
        "tags": [
          "ApiProducts"
        ],
        "operationId": "ApiProducts_ListByApi",
        "description": "List all API associated products.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation returns a collection of products which have the Api entity.",
            "schema": {
              "$ref": "#/definitions/ProductPaged"
            }
          },
          "404": {
            "description": "The API does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_ListByService",
        "description": "List all subscriptions of the Api Management service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn776325.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field        | Supported operators    | Supported functions                         |\n|--------------|------------------------|---------------------------------------------|\n| id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state        | eq                     |                                             |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Subscription entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          },
          "400": {
            "description": "The request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Get",
        "description": "The response body contains the specified Subscription entity.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Subscription entity.",
            "schema": {
              "$ref": "#/definitions/SubscriptionContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified subscription does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_CreateOrUpdate",
        "description": "This operation subscribes the specified user to the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription.",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The user was successfully subscribed to the product."
          },
          "204": {
            "description": "The user already subscribed to the product."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "409": {
            "description": "Subscription with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Update",
        "description": "This operation updates the details of a subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Subscription Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The subscription details were successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified subscription doesn’t exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_Delete",
        "description": "Deletes specific subscription of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Subscription Entity. Etag should match current Entity state or it should be * for Unconditional delete.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The subscription details were successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_RegeneratePrimaryKey",
        "description": "Regenerates primary key of existing subscription of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The primary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified subscription does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "The operation is not allowed due to the current subscription state.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "operationId": "Subscriptions_RegenerateSecondaryKey",
        "description": "Regenerates secondary key of existing subscription of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the subscription."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The secondary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified subscription does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "The operation is not allowed due to the current subscription state.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_ListByService",
        "description": "This operation returns a collection of products in the specified service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn776336.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state       | eq                     |                                             |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "name": "expandGroups",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, the response contains an array of groups that have visibility to the product. The default is false."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Product entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/ProductPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Get",
        "description": "This operation returns the details of the product specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Product entity.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_CreateOrUpdate",
        "description": "This operation creates a new product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Product was successfully created."
          },
          "204": {
            "description": "Product already exists."
          },
          "400": {
            "description": "Request validation failed.One cause for request validation to fail is if either one or both of the approvalRequired and subscriptionLimit properties are present in the request body along with the subscriptionRequired property set to false.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Product with same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Update",
        "description": "Update product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "400": {
            "description": "Request validation failed.One cause for request validation to fail is if either one or both of the approvalRequired and subscriptionLimit properties are present in the request body along with the subscriptionRequired property set to false.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the product resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Delete",
        "description": "Delete product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Delete existing subscriptions to the product or not."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. Etag should match current Entity state or it should be * for Unconditional delete.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The product was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.One cause for request validation to fail is if either one or both of the approvalRequired and subscriptionLimit properties are present in the request body along with the subscriptionRequired property set to false.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the product resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis": {
      "get": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_ListByProduct",
        "description": "This operation lists the APIs associated with a product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains a collection of Api entities in the product.",
            "schema": {
              "$ref": "#/definitions/ApiPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}": {
      "put": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Add",
        "description": "This operation adds an API to the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The API was successfully added to the product."
          },
          "204": {
            "description": "The specified API is already added to the product."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid product or API id.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Remove",
        "description": "This operation removes the specified API from the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully removed from the product."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups": {
      "get": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_ListByProduct",
        "description": "This operations returns the developer groups associated with the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type        | eq, ne                 | N/A                                         |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of Group entities.",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}": {
      "put": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Add",
        "description": "This operation associates the specified developer group with the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The group was successfully associated with the product.."
          },
          "204": {
            "description": "The specified group is already associated with the product."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid product or group id.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Remove",
        "description": "This operation removes the association between the specified group and product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The group was successfully disassociated with the product."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid product or group id.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_ListByService",
        "description": "This operation returns a collection of groups defined within a service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn776329.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type        | eq, ne                 | N/A                                         |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of Group entities.",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Get",
        "description": "This operation returns the details of the group specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Group entity.",
            "schema": {
              "$ref": "#/definitions/GroupContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified group does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_CreateOrUpdate",
        "description": "This operation creates a new group.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Group was created succesfully."
          },
          "204": {
            "description": "Group already exists."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "The group with same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Update",
        "description": "This operation updates the details of the group specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Group Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The group details were successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified group doesn’t exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "The specified group cannot be updated because it is a built-in group.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the group resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "operationId": "Groups_Delete",
        "description": "Deletes specific group of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Group Entity. Etag should match current Entity state or it should be * for Unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The group was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "The specified group cannot be updated because it is a built-in group.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the group resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users": {
      "get": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_ListByGroup",
        "description": "This operation lists the members of the group, specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field            | Supported operators    | Supported functions               |\n|------------------|------------------------|-----------------------------------|\n| id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state            | eq                     | N/A                               |\n| registrationDate | ge, le, eq, ne, gt, lt | N/A                               |\n| note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of user entities associated with the group.",
            "schema": {
              "$ref": "#/definitions/UserPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified group does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/UserContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users/{uid}": {
      "put": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_Add",
        "description": "This operation adds a user to a group.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The user was successfully added to the group."
          },
          "204": {
            "description": "The specified user is already a member of the specified group."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid user identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified group doesn’t exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "Attempt was made to add a user to a built-in group. Built-in group membership is managed by the system.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "GroupUsers"
        ],
        "operationId": "GroupUsers_Remove",
        "description": "Remove existing user from existing group.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully removed from the group.."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid user identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified group doesn’t exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "Attempt was made to add a user to a built-in group. Built-in group membership is managed by the system.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_ListByService",
        "description": "This operation returns a collection of all certificates in the specified service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn783483.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field          | Supported operators    | Supported functions                         |\n|----------------|------------------------|---------------------------------------------|\n| id             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| subject        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| thumbprint     | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| expirationDate | ge, le, eq, ne, gt, lt | N/A                                         |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of Certificate entity.",
            "schema": {
              "$ref": "#/definitions/CertificatePaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/CertificateContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_Get",
        "description": "This operation returns the details of the certificate specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the certificate."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Certificate entity.",
            "schema": {
              "$ref": "#/definitions/CertificateContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified certificate does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_CreateOrUpdate",
        "description": "This operation adds a new certificate to or updates an existing certificate of the specified API Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the certificate entity. Must be unique in the current API Management service instance.",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateCreateOrUpdateParameters"
            },
            "description": "Create parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "The entity state version of the Certificate. A value of \"*\" can be used for If-Match to unconditionally apply the operation..",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The new certificate was successfully added."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Certificate with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "operationId": "Certificates_Delete",
        "description": "Deletes specific certificate.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the certificate."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the certificate. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The certificate was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policySnippets": {
      "get": {
        "tags": [
          "PolicySnippets"
        ],
        "operationId": "PolicySnippets_ListByService",
        "description": "List all policy snippets.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Policy scope.",
            "enum": [
              "Tenant",
              "Product",
              "Api",
              "Operation",
              "All"
            ],
            "x-ms-enum": {
              "name": "PolicyScopeContract",
              "modelAsString": false
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of Policy Contracts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicySnippetContract"
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/subscriptions": {
      "get": {
        "tags": [
          "ProductSubscriptions"
        ],
        "operationId": "ProductSubscriptions_ListByProduct",
        "description": "This operations returns the subscriptions to the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field        | Supported operators    | Supported functions                         |\n|--------------|------------------------|---------------------------------------------|\n| id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state        | eq                     |                                             |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of subscription entities.",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified product does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_ListByService",
        "description": "This operation returns a collection of registered users in the specified service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn776330.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field            | Supported operators    | Supported functions               |\n|------------------|------------------------|-----------------------------------|\n| id               | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| firstName        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| lastName         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| email            | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state            | eq                     | N/A                               |\n| registrationDate | ge, le, eq, ne, gt, lt | N/A                               |\n| note             | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of User entities.",
            "schema": {
              "$ref": "#/definitions/UserPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/UserContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Get",
        "description": "This operation returns the details of the user specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the specified user entity.",
            "schema": {
              "$ref": "#/definitions/UserContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_CreateOrUpdate",
        "description": "This operation creates a new user.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "User was successfully created."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "User with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Update",
        "description": "This operation updates the details of the user specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the user to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The user details were successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified user doesn’t exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "Administrator user cannot be modified.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the user resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Delete",
        "description": "Deletes specific user.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to delete user's subscription or not."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the user to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The user details were successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "Administrator user cannot be modified.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the user resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/generateSsoUrl": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_GenerateSsoUrl",
        "description": "This operation retrieves a redirection URL containing an authentication token for signing a given user into the developer portal.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the single sign-on URL.",
            "schema": {
              "$ref": "#/definitions/GenerateSsoUrlResult"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/groups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "operationId": "UserGroups_ListByUser",
        "description": "List all user groups.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of Group entities.",
            "schema": {
              "$ref": "#/definitions/GroupPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/subscriptions": {
      "get": {
        "tags": [
          "UserSubscriptions"
        ],
        "operationId": "UserSubscriptions_ListByUser",
        "description": "This operations returns the subscriptions of the specified user.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field        | Supported operators    | Supported functions                         |\n|--------------|------------------------|---------------------------------------------|\n| id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state        | eq                     |                                             |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of Subscription entities.",
            "schema": {
              "$ref": "#/definitions/SubscriptionPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers": {
      "get": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_ListByService",
        "description": "This operation returns a collection of authorization servers defined within a service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn879064.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Authorization Server entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/AuthorizationServerPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OAuth2AuthorizationServerContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}": {
      "get": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Get",
        "description": "This operation returns the details of the authorization server specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The authorization server settings were successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_CreateOrUpdate",
        "description": "Creates new authorization server.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server.",
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationServerCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Authorization server was successfully registered."
          },
          "204": {
            "description": "Authorization server is already registered."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Authorization server with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Update",
        "description": "This operation updates the details of the authorization server specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationServerCreateOrUpdateParameters"
            },
            "description": "Create or update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the authorization server to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The authorization server settings were successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuthorizationServers"
        ],
        "operationId": "AuthorizationServers_Delete",
        "description": "Deletes specific authorization server instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "authsid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the authorization server."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the authentication server to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The authorization server settings were successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified authorization server does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "operationId": "Regions_ListByService",
        "description": "List all azure regions in which the service exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Regions in which the service is deployed.",
            "schema": {
              "$ref": "#/definitions/RegionListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/identities": {
      "get": {
        "tags": [
          "UserIdentities"
        ],
        "operationId": "UserIdentities_ListByUser",
        "description": "List all user identities.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/UserIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of User Identities.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserIdentityContract"
              }
            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/{aggregation}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "operationId": "Reports_ListByService",
        "description": "Lists report records.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "aggregation",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Report aggregation.",
            "enum": [
              "byApi",
              "byGeo",
              "byOperation",
              "byProduct",
              "bySubscription",
              "byTime",
              "byUser"
            ],
            "x-ms-enum": {
              "name": "ReportsAggregation",
              "modelAsString": false
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "By time interval. This value is only applicable to ByTime aggregation. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, secconds))"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a Collection of Report record.",
            "schema": {
              "$ref": "#/definitions/ReportPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ReportRecordContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access": {
      "get": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_Get",
        "description": "Get tenant access information details.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant Access information.",
            "schema": {
              "$ref": "#/definitions/AccessInformationContract"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_Update",
        "description": "Update tenant access information details.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessInformationUpdateParameters"
            },
            "description": "Parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the tenant access settings to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Tenant's access information updated successfully."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Entity with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_RegeneratePrimaryKey",
        "description": "Regenerate primary access key.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The primary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "TenantAccess"
        ],
        "operationId": "TenantAccess_RegenerateSecondaryKey",
        "description": "Regenerate secondary access key.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The secondary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers": {
      "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_ListByService",
        "description": "This operation returns a collection of loggers in the specified service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/mt592020.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type  | eq                     |                                             |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a collection of Logger entities.",
            "schema": {
              "$ref": "#/definitions/LoggerPaged"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/LoggerGetContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerid}": {
      "get": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Get",
        "description": "This operation returns the details of the logger specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Logger entity.",
            "schema": {
              "$ref": "#/definitions/LoggerGetContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified logger does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_CreateOrUpdate",
        "description": "This operation creates a new logger or updates and existing one.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger.",
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Logger was successfully created."
          },
          "204": {
            "description": "The existing logger was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Logger with the same identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Update",
        "description": "This operation updates an existing logger.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoggerUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the logger to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The existing logger was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified logger does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the logger resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Loggers"
        ],
        "operationId": "Loggers_Delete",
        "description": "This operation deletes the specified logger.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "loggerid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the logger."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the logger to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The logger was successfully deleted."
          },
          "400": {
            "description": "The logger cannot be deleted because it is being used by one or more policies.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "412": {
            "description": "Returned if the logger resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_ListByService",
        "description": "This operation returns a collection of properties defined within a service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/mt651775.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                                   |\n|-------|------------------------|-------------------------------------------------------|\n| tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith           |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Property entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/PropertyPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/PropertyContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties/{propId}": {
      "get": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Get",
        "description": "This operation returns the details of the property specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Property entity.",
            "schema": {
              "$ref": "#/definitions/PropertyContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified property does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_CreateOrUpdate",
        "description": "Creates new property.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property.",
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyCreateParameters"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Property was successfully created."
          },
          "204": {
            "description": "Property was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "Property with the specified identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Update",
        "description": "Patches specific property.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the property to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Property was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "Property with the specified identifier does not exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the property resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "Property"
        ],
        "operationId": "Property_Delete",
        "description": "Deletes specific property from the the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "propId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the property."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the property to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Property was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "The specified property cannot be deleted because it is in use in a policy. You must remove all references to this property before it can be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the property resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders": {
      "get": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_ListByService",
        "description": "List all OpenID Connect Providers.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field | Supported operators    | Supported functions                         |\n|-------|------------------------|---------------------------------------------|\n| id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return."
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of records to skip."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the OpenId Connect Providers.",
            "schema": {
              "$ref": "#/definitions/OpenIdConnectProviderPaged"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/OpenidConnectProviderContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}": {
      "get": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Get",
        "description": "Gets specific OpenID Connect Provider.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified OpenId Connect Provider entity.",
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "The specified OpenId Connect Provider does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "put": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_CreateOrUpdate",
        "description": "Creates new OpenID Connect Provider.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider.",
            "maxLength": 256,
            "pattern": "^[^*#&+:<>?]+$"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderCreateContract"
            },
            "description": "Create parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "OpenIdConnect Provider was successfully created."
          },
          "204": {
            "description": "OpenIdConnect Provider was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "409": {
            "description": "OpenIdConnect Provider with the specified identifier already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "patch": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Update",
        "description": "Patches specific OpenID Connect Provider.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenidConnectProviderUpdateContract"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the OpenID Connect Provider to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "OpenId Connect Provider was successfully updated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "404": {
            "description": "OpenId Connect Provider with the specified identifier does not exists.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the OpenId Connect Provider resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      },
      "delete": {
        "tags": [
          "OpenIdConnectProviders"
        ],
        "operationId": "OpenIdConnectProviders_Delete",
        "description": "Deletes specific OpenID Connect Provider of the Api Management service instance.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "opid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifier of the OpenID Connect Provider."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "The entity state version of the OpenID Connect Provider to delete. A value of \"*\" can be used for If-Match to unconditionally apply the operation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "OpenId Connect Provider was successfully deleted."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "405": {
            "description": "The specified OpenIdConnect Provider cannot be deleted because it is in use in a policy. You must remove all references to this property before it can be deleted..",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          },
          "412": {
            "description": "Returned if the OpenId Connect Provider resource doesn’t pass the condition specified by the If-Match header.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git": {
      "get": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_Get",
        "description": "This operation returns the Git access configuration for the tenant.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Git Access Information for the Service.",
            "schema": {
              "$ref": "#/definitions/AccessInformationContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regeneratePrimaryKey": {
      "post": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_RegeneratePrimaryKey",
        "description": "Regenerate primary access key for GIT.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The primary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regenerateSecondaryKey": {
      "post": {
        "tags": [
          "TenantAccessGit"
        ],
        "operationId": "TenantAccessGit_RegenerateSecondaryKey",
        "description": "Regenerate secondary access key for GIT.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The secondary key was successfully regenerated."
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/deploy": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Deploy",
        "description": "This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployConfigurationParameters"
            },
            "description": "Deploy Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Result of appplying changes from Git branch to database.",
            "schema": {
              "$ref": "#/definitions/OperationResultContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"

            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/save": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Save",
        "description": "This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveConfigurationParameter"
            },
            "description": "Save Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Result of creating a commit in the repository.",
            "schema": {
              "$ref": "#/definitions/OperationResultContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/validate": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "operationId": "TenantConfiguration_Validate",
        "description": "This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeployConfigurationParameters"
            },
            "description": "Validate Configuration parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Result of validating the changes in the specified Git branch.",
            "schema": {
              "$ref": "#/definitions/OperationResultContract"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/syncState": {
      "get": {
        "tags": [
          "TenantConfigurationSyncState"
        ],
        "operationId": "TenantConfigurationSyncState_Get",
        "description": "This operation returns the status of the most recent synchronization between the configuration database and the Git repository.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync state result.",
            "schema": {
              "$ref": "#/definitions/TenantConfigurationSyncStateContract"
            }
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}?export=true": {
      "get": {
        "tags": [
          "Apis"
        ],
        "operationId": "Apis_Export",
        "description": "This operation returns the details of the API specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response contains a stream with a full set of API metadata and includes API entity with an embedded array of operation entities.",
            "schema": {
              "$ref": "#/definitions/ApiExportResult"
            }
          },
          "400": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          },
          "404": {
            "description": "The specified API does not exist.",
            "schema": {
              "$ref": "#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ResourcesMoveInfo": {
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ids of the resources."
        },
        "targetResourceGroup": {
          "type": "string",
          "description": "The target resource group."
        }
      },
      "description": "Parameters of move resources."
    },
    "CertificateInformation": {
      "properties": {
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the certificate."
        },
        "subject": {
          "type": "string",
          "description": "Subject of the certificate."
        }
      },
      "required": [
        "expiry",
        "thumbprint",
        "subject"
      ],
      "description": "SSL certificate information."
    },
    "HostnameConfiguration": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Hostname type.",
          "enum": [
            "Proxy",
            "Portal",
            "Management",
            "Scm"
          ],
          "x-ms-enum": {
            "name": "HostnameType",
            "modelAsString": false
          }
        },
        "hostname": {
          "type": "string",
          "description": "Hostname."
        },
        "certificate": {
          "$ref": "#/definitions/CertificateInformation",
          "description": "Certificate information."
        }
      },
      "required": [
        "type",
        "hostname",
        "certificate"
      ],
      "description": "Custom hostname configuration."
    },
    "VirtualNetworkConfiguration": {
      "properties": {
        "vnetid": {
          "readOnly": true,
          "type": "string",
          "description": "Virtual network id."
        },
        "subnetname": {
          "readOnly": true,
          "type": "string",
          "description": "Subnet name."
        },
        "subnetResourceId": {
          "type": "string",
          "description": "Subnet Resource Id."
        },
        "location": {
          "type": "string",
          "description": "Virtual network location name."
        }
      },
      "description": "Configuration of a virtual network."
    },
    "AdditionalRegion": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Location name."
        },
        "skuType": {
          "type": "string",
          "description": "Sku type in the location.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "skuUnitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Sku Unit count at the location."
        },
        "staticIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Static IP addresses of the location virtual machines."
        },
        "vpnconfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Virtual network configuration for the location."
        }
      },
      "description": "Description of an additional ApiService resource location."
    },
    "ApiServiceManageDeploymentsParameters": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the Api Management service Azure data center."
        },
        "skuType": {
          "type": "string",
          "description": "Sku type of the Api Management service.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "skuUnitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Sku Unit count of the Api Management service."
        },
        "additionalLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalRegion"
          },
          "description": "Additional data center locations for the Api Management service."
        },
        "vpnConfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Virtual network configuration."
        },
        "vpnType": {
          "type": "string",
          "description": "Vpn type.",
          "enum": [
            "None",
            "External",
            "Internal"
          ],
          "x-ms-enum": {
            "name": "VirtualNetworkType",
            "modelAsString": false
          }
        }
      },
      "required": [
        "location",
        "skuType"
      ],
      "description": "Parameters supplied to the ManageDeployments operation."
    },
    "ApiServiceBackupRestoreParameters": {
      "properties": {
        "storageAccount": {
          "type": "string",
          "description": "Azure Cloud Storage account (used to place/retrieve the backup) name."
        },
        "accessKey": {
          "type": "string",
          "description": "Azure Cloud Storage account (used to place/retrieve the backup) access key."
        },
        "containerName": {
          "type": "string",
          "description": "Azure Cloud Storage blob container name used to place/retrieve the backup."
        },
        "backupName": {
          "type": "string",
          "description": "The name of the backup."
        }
      },
      "required": [
        "storageAccount",
        "accessKey",
        "containerName",
        "backupName"
      ],
      "description": "Parameters supplied to the Backup/Restore of an Api Management service operation."
    },
    "ApiServiceProperties": {
      "properties": {
        "publisherEmail": {
          "type": "string",
          "description": "Publisher email.",
          "maxLength": 100
        },
        "publisherName": {
          "type": "string",
          "description": "Publisher name."
        },
        "provisioningState": {
          "type": "string",
          "description": "Provisioning state of the Api Management service."
        },
        "targetProvisioningState": {
          "type": "string",
          "description": "Target provisioning state of the Api Management service.The state that is targeted for the Api Management service by the infrastructure."
        },
        "createdAtUtc": {
          "type": "string",
          "format": "date-time",
          "description": "Creation UTC date of the Api Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "runtimeUrl": {
          "type": "string",
          "description": "Proxy endpoint Url of the Api Management service."
        },
        "portalUrl": {
          "type": "string",
          "description": "management portal endpoint Url of the Api Management service."
        },
        "managementApiUrl": {
          "type": "string",
          "description": "management api endpoint Url of the Api Management service."
        },
        "scmUrl": {
          "type": "string",
          "description": "Scm endpoint Url of the Api Management service."
        },
        "addresserEmail": {
          "type": "string",
          "description": "Addresser email."
        },
        "hostnameConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostnameConfiguration"
          },
          "description": "Custom hostname configuration of the Api Management service."
        },
        "staticIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Static ip addresses of the Api Management service virtual machines. Available only for Standard and Premium Sku."
        },
        "vpnconfiguration": {
          "$ref": "#/definitions/VirtualNetworkConfiguration",
          "description": "Virtual network configuration of the Api Management service."
        },
        "additionalLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalRegion"
          },
          "description": "Additional datacenter locations description of the Api Management service."
        },
        "customProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Custom properties of the Api Management service."
        },
        "vpnType": {
          "type": "string",
          "description": "Virtual private network type of the Api Management service.",
          "enum": [
            "None",
            "External",
            "Internal"
          ],
          "x-ms-enum": {
            "name": "VirtualNetworkType",
            "modelAsString": false
          }
        }
      },
      "description": "Properties of an Api Management service resource description."
    },
    "ApiServiceSkuProperties": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Sku.",
          "enum": [
            "Developer",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuType",
            "modelAsString": false
          }
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of the Sku (number of deployed units of the Sku)."
        }
      },
      "description": "Api Management service resource Sku properties."
    },
    "ApiServiceResource": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the created Api Management service."
        },
        "location": {
          "type": "string",
          "description": "Datacenter location of the Api Management service."
        },
        "name": {
          "type": "string",
          "description": "Name of the Api Management service."
        },
        "type": {
          "type": "string",
          "description": "Resource type of the Api Management service."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags of the Api Management service."
        },
        "properties": {
          "$ref": "#/definitions/ApiServiceProperties",
          "description": "Properties of the Api Management service."
        },
        "sku": {
          "$ref": "#/definitions/ApiServiceSkuProperties",
          "description": "Sku properties of the Api Management service."
        }
      },
      "description": "Description of an Api Management service resource."
    },
    "ApiServiceCreateOrUpdateParameters": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Api Management service data center location."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Api Management service tags. A maximum of 10 tags can be provided for a resource, and each tag must have a key no greater than 128 characters (and value no greater than 256 characters)"
        },
        "properties": {
          "$ref": "#/definitions/ApiServiceProperties",
          "description": "Properties of the Api Management service."
        },
        "sku": {
          "$ref": "#/definitions/ApiServiceSkuProperties",
          "description": "Sku properties of the Api Management service."
        }
      },
      "required": [
        "location",
        "properties",
        "sku"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Api Management service operation."
    },
    "ApiServiceListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiServiceResource"
          },
          "description": "Result of the List Api Management services operation."
        },
        "nextLink": {
          "type": "string",
          "description": "Link to the next set of results. Not empty if Value contains incomplete list of Api Management services."
        }
      },
      "description": "The response of the List Api Management services operation."
    },
    "ApiServiceGetSsoTokenResult": {
      "properties": {
        "redirect_uri": {
          "type": "string",
          "description": "Redirect url containing the SSO token."
        }
      },
      "description": "The response of the GetSsoToken operation."
    },
    "ApiServiceCheckNameAvailabilityParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to check for."
        }
      },
      "required": [
        "name"
      ],
      "description": "Parameters supplied to the CheckNameAvailability operation."
    },
    "ApiServiceNameAvailabilityResult": {
      "properties": {
        "nameAvailable": {
          "type": "boolean",
          "description": "True if the name is available and can be used to create new Api Management service. Otherwise false."
        },
        "message": {
          "type": "string",
          "description": "The message, which provides the resource naming requirements in case the reason is Invalid."
        },
        "reason": {
          "type": "string",
          "description": "The reason when isAvailable is false.",
          "enum": [
            "Valid",
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "NameAvailabilityReason",
            "modelAsString": false
          }
        }
      },
      "description": "Response of the CheckNameAvailability operation."
    },
    "ApiServiceUploadCertificateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Hostname type.",
          "enum": [
            "Proxy",
            "Portal",
            "Management",
            "Scm"
          ],
          "x-ms-enum": {
            "name": "HostnameType",
            "modelAsString": false
          }
        },
        "certificate": {
          "type": "string",
          "description": "Base64 Encoded certificate."
        },
        "certificate_password": {
          "type": "string",
          "description": "Certificate password."
        }
      },
      "required": [
        "type",
        "certificate",
        "certificate_password"
      ],
      "description": "Parameters supplied to the Upload SSL certificate for an Api Management service operation."
    },
    "ApiServiceUpdateHostnameParameters": {
      "properties": {
        "update": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostnameConfiguration"
          },
          "description": "Hostnames to create of update."
        },
        "delete": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Proxy",
              "Portal",
              "Management",
              "Scm"
            ],
            "x-ms-enum": {
              "name": "HostnameType",
              "modelAsString": false
            }
          },
          "description": "Hostnames to delete."
        }
      },
      "description": "Parameters supplied to the UpdateHostname operation."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract"
        }
      },
      "description": "API Authentication Settings."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details."
    },
    "ApiContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier path: /apis/{apiId}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Path for API requests.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Http",
              "Https"
            ],
            "x-ms-enum": {
              "name": "ApiProtocolContract",
              "modelAsString": false
            }
          },
          "description": "Protocols over which API is made available."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "Http",
            "Soap"
          ],
          "x-ms-enum": {
            "name": "ApiTypeContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "name",
        "serviceUrl",
        "path",
        "protocols"
      ],
      "description": "API details."
    },
    "ApiPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api list representation."
    },
    "ApiCreateOrUpdateParameters": {
      "properties": {
        "ApiContract": {
          "$ref": "#/definitions/ApiContract",
          "description": "ApiContract."
        }
      },
      "required": [
        "ApiContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Api operation."
    },
    "PatchParameters": {
      "properties": {
        "RawJson": {
          "type": "object",
          "description": "json value."
        }
      },
      "required": [
        "RawJson"
      ],
      "description": "Parameters supplied to the Patch operations."
    },
    "ApiExportResult": {
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Response content bytes."
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "Continue",
            "OK",
            "Created",
            "Accepted",
            "NotFound",
            "Conflict"
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "modelAsString": false
          }
        },
        "requestId": {
          "type": "string"
        }
      },
      "description": "The response model for the export API output operation."
    },
    "ParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name."
        },
        "description": {
          "type": "string",
          "description": "Parameter description."
        },
        "type": {
          "type": "string",
          "description": "Parameter type."
        },
        "defaultValue": {
          "type": "string",
          "description": "Default parameter value."
        },
        "required": {
          "type": "boolean",
          "description": "whether parameter is required or not."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameter values."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "Operation parameters details."
    },
    "RepresentationContract": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Content type."
        },
        "sample": {
          "type": "string",
          "description": "Content sample."
        }
      },
      "required": [
        "contentType"
      ],
      "description": "Operation request/response representation details."
    },
    "RequestContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Operation request description."
        },
        "queryParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request query parameters."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of operation request headers."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation request representations."
        }
      },
      "description": "Operation request details."
    },
    "ResultContract": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "Operation response status code."
        },
        "description": {
          "type": "string",
          "description": "Operation response description."
        },
        "representations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepresentationContract"
          },
          "description": "Collection of operation response representations."
        }
      },
      "required": [
        "statusCode"
      ],
      "description": "Operation response details."
    },
    "OperationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "OperationId path."
        },
        "name": {
          "type": "string",
          "description": "Operation Name.",
          "minLength": 1,
          "maxLength": 300
        },
        "method": {
          "type": "string",
          "description": "Operation Method (GET, PUT, POST, etc.)."
        },
        "urlTemplate": {
          "type": "string",
          "description": "Operation URI template. Cannot be more than 400 characters long.",
          "maxLength": 400
        },
        "templateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterContract"
          },
          "description": "Collection of URL template parameters."
        },
        "description": {
          "type": "string",
          "description": "Operation description."
        },
        "request": {
          "$ref": "#/definitions/RequestContract",
          "description": "Operation request."
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultContract"
          },
          "description": "Array of Operation responses."
        }
      },
      "required": [
        "name",
        "method",
        "urlTemplate"
      ],
      "description": "Api Operation details."
    },
    "OperationPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Operation list representation."
    },
    "OperationCreateOrUpdateParameters": {
      "properties": {
        "OperationContract": {
          "$ref": "#/definitions/OperationContract",
          "description": "operation details."
        }
      },
      "required": [
        "OperationContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Operation operation."
    },
    "ProductContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Product identifier path."
        },
        "name": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Product description. May be 1 to 500 characters long."
        },
        "terms": {
          "type": "string",
          "description": "Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
        },
        "approvalRequired": {
          "type": "boolean",
          "description": "whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
          "enum": [
            "NotPublished",
            "Published"
          ],
          "x-ms-enum": {
            "name": "ProductStateContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "name"
      ],
      "description": "Product profile."
    },
    "ProductPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Products list representation."
    },
    "SubscriptionContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Subscription identifier path."
        },
        "userId": {
          "type": "string",
          "description": "Subscriber identifier path in form /users/{uid}"
        },
        "productId": {
          "type": "string",
          "description": "Product identifier path in form /products/{productid}"
        },
        "name": {
          "type": "string",
          "description": "Subscription name."
        },
        "state": {
          "type": "string",
          "description": "Subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "notificationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "primaryKey": {
          "type": "string",
          "description": "Subscription primary key."
        },
        "secondaryKey": {
          "type": "string",
          "description": "Subscription secondary key."
        },
        "stateComment": {
          "type": "string",
          "description": "Subscription State Comment."
        }
      },
      "description": "Subscription details."
    },
    "SubscriptionPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Subsctions list representation."
    },
    "SubscriptionCreateParameters": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "User (user id path) for whom subscription is being created in form /users/{uid}"
        },
        "productId": {
          "type": "string",
          "description": "Product (product id path) for which subscription is being created in form /products/{productid}"
        },
        "name": {
          "type": "string",
          "description": "Subscription name."
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary subscription key. If not specified during request key will be generated automatically.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary subscription key. If not specified during request key will be generated automatically.",
          "minLength": 1,
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Initial subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        }
      },
      "required": [
        "userId",
        "productId",
        "name"
      ],
      "description": "Parameters supplied to the Create subscription operation."
    },
    "SubscriptionUpdateParameters": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "User identifier path: /users/{uid}"
        },
        "productId": {
          "type": "string",
          "description": "Product identifier path: /products/{productId}"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "New subscription expiration date."
        },
        "name": {
          "type": "string",
          "description": "Subscription name."
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary subscription key.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary subscription key.",
          "minLength": 1,
          "maxLength": 256
        },
        "state": {
          "type": "string",
          "description": "Initial subscription state.",
          "enum": [
            "Suspended",
            "Active",
            "Expired",
            "Submitted",
            "Rejected",
            "Cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStateContract",
            "modelAsString": false
          }
        },
        "stateComment": {
          "type": "string",
          "description": "Comments describing subscription state change."
        }
      },
      "description": "Parameters supplied to the Update subscription operation."
    },
    "ProductCreateParameters": {
      "properties": {
        "ProductContract": {
          "$ref": "#/definitions/ProductContract"
        }
      },
      "required": [
        "ProductContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Product operation."
    },
    "ProductUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Product name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Product description.",
          "maxLength": 500,
          "minLength": 1
        },
        "terms": {
          "type": "string",
          "description": "Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
        },
        "approvalRequired": {
          "type": "boolean",
          "description": "whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
          "enum": [
            "NotPublished",
            "Published"
          ],
          "x-ms-enum": {
            "name": "ProductStateContract",
            "modelAsString": false
          }
        }
      },
      "description": "Parameters supplied to the CreateOrUpdate Product operation."
    },
    "GroupContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "group identifier."
        },
        "name": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description."
        },
        "builtIn": {
          "readOnly": true,
          "type": "boolean",
          "description": "Group is built in or not."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Identifier for an external group."
        }
      },
      "required": [
        "name"
      ],
      "description": "Developer group."
    },
    "GroupPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Group list representation."
    },
    "GroupCreateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Identifier for an external group."
        }
      },
      "required": [
        "name"
      ],
      "description": "Parameters supplied to the Create Group operation."
    },
    "GroupUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "Custom",
            "System",
            "External"
          ],
          "x-ms-enum": {
            "name": "GroupTypeContract",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "Identifier for an external group."
        }
      },
      "description": "Parameters supplied to the Update Group operation."
    },
    "UserIdentityContract": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "Identity provider name."
        },
        "id": {
          "type": "string",
          "description": "Identifier value within provider."
        }
      },
      "description": "User identity details."
    },
    "UserContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "User identifier path."
        },
        "firstName": {
          "type": "string",
          "description": "First name."
        },
        "lastName": {
          "type": "string",
          "description": "Last name."
        },
        "email": {
          "type": "string",
          "description": "Email address."
        },
        "state": {
          "type": "string",
          "description": "User state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "note": {
          "type": "string",
          "description": "Administrator's note about given user."
        },
        "identities": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserIdentityContract"
          },
          "description": "Collection of user identities."
        }
      },
      "description": "User profile."
    },
    "UserPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Users list representation."
    },
    "CertificateContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Certificate identifier path: /certificates/{certificateId}"
        },
        "subject": {
          "type": "string",
          "description": "Subject attribute of the certificate."
        },
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the certificate."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        }
      },
      "description": "Certificate details."
    },
    "CertificatePaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Certificates list representation."
    },
    "CertificateCreateOrUpdateParameters": {
      "properties": {
        "data": {
          "type": "string",
          "description": "Base 64 encoded Certificate"
        },
        "password": {
          "type": "string",
          "description": "Password for the Certificate"
        }
      },
      "description": "Parameters supplied to the CreateOrUpdate certificate operation."
    },
    "PolicySnippetContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Snippet name."
        },
        "content": {
          "type": "string",
          "description": "Snippet content."
        },
        "toolTip": {
          "type": "string",
          "description": "Snippet toolTip."
        },
        "scope": {
          "type": "string",
          "description": "Snippet scope.",
          "enum": [
            "Tenant",
            "Product",
            "Api",
            "Operation",
            "All"
          ],
          "x-ms-enum": {
            "name": "PolicyScopeContract",
            "modelAsString": false
          }
        }
      },
      "description": "Policy snippet."
    },
    "UserCreateParameters": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address."
        },
        "password": {
          "type": "string",
          "description": "Password."
        },
        "firstName": {
          "type": "string",
          "description": "First name.",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Last name.",
          "minLength": 1,
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Account state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "note": {
          "type": "string",
          "description": "Note about user."
        }
      },
      "required": [
        "email",
        "password",
        "firstName",
        "lastName"
      ],
      "description": "Parameters supplied to the Create User operation."
    },
    "UserUpdateParameters": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address."
        },
        "password": {
          "type": "string",
          "description": "Password."
        },
        "firstName": {
          "type": "string",
          "description": "First name.",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "Last name.",
          "minLength": 1,
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Account state.",
          "enum": [
            "Active",
            "Blocked"
          ],
          "x-ms-enum": {
            "name": "UserStateContract",
            "modelAsString": false
          }
        },
        "note": {
          "type": "string",
          "description": "Note about user."
        }
      },
      "description": "Parameters supplied to the Update User operation."
    },
    "GenerateSsoUrlResult": {
      "properties": {
        "value": {
          "type": "string",
          "description": "SSO URL value."
        }
      },
      "description": "Generate SSO Url operations response details."
    },
    "TokenBodyParameterContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "body parameter name."
        },
        "value": {
          "type": "string",
          "description": "body parameter value."
        }
      },
      "description": "OAuth acquire token request body parameter (www-url-form-encoded)."
    },
    "OAuth2AuthorizationServerContract": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Authorization server identifier path."
        },
        "name": {
          "type": "string",
          "description": "User-friendly authorization server name."
        },
        "description": {
          "type": "string",
          "description": "User-friendly authorization server name."
        },
        "clientRegistrationEndpoint": {
          "type": "string",
          "description": "Client registration URI that will be shown for developers."
        },
        "authorizationEndpoint": {
          "type": "string",
          "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2."
        },
        "authorizationMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HEAD",
              "OPTIONS",
              "TRACE",
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ],
            "x-ms-enum": {
              "name": "MethodContract",
              "modelAsString": false
            }
          },
          "description": "Supported methods of authorization."
        },
        "clientAuthenticationMethod": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Basic",
              "Body"
            ],
            "x-ms-enum": {
              "name": "ClientAuthenticationMethodContract",
              "modelAsString": false
            }
          },
          "description": "Supported methods of authorization."
        },
        "tokenBodyParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenBodyParameterContract"
          },
          "description": "Token request body parameters."
        },
        "tokenEndpoint": {
          "type": "string",
          "description": "OAuth token endpoint. See http://tools.ietf.org/html/rfc6749#section-3.1 ."
        },
        "supportState": {
          "type": "boolean",
          "description": "whether Auhtorizatoin Server supports client credentials in body or not. See http://tools.ietf.org/html/rfc6749#section-3.1 ."
        },
        "defaultScope": {
          "type": "string",
          "description": "Scope that is going to applied by default on the console page. See http://tools.ietf.org/html/rfc6749#section-3.3 ."
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationCode",
              "implicit",
              "resourceOwnerPassword",
              "clientCredentials"
            ],
            "x-ms-enum": {
              "name": "GrantTypesContract",
              "modelAsString": false
            }
          },
          "description": "Form of an authorization grant, which the client uses to request the access token. See http://tools.ietf.org/html/rfc6749#section-4 ."
        },
        "bearerTokenSendingMethods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "authorizationHeader",
              "query"
            ],
            "x-ms-enum": {
              "name": "BearerTokenSendingMethodsContract",
              "modelAsString": false
            }
          },
          "description": "Form of an authorization grant, which the client uses to request the access token. See http://tools.ietf.org/html/rfc6749#section-4 ."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        },
        "resourceOwnerUsername": {
          "type": "string",
          "description": "Username of the resource owner on behalf of whom developer console will make requests."
        },
        "resourceOwnerPassword": {
          "type": "string",
          "description": "Password of the resource owner on behalf of whom developer console will make requests."
        }
      },
      "description": "External OAuth authorization server settings."
    },
    "AuthorizationServerPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuth2AuthorizationServerContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged OAuth2 Authorization Servers list representation."
    },
    "AuthorizationServerCreateOrUpdateParameters": {
      "properties": {
        "OAuth2AuthorizationServerContract": {
          "$ref": "#/definitions/OAuth2AuthorizationServerContract",
          "description": "OAuth2 Authorization Server details."
        }
      },
      "required": [
        "OAuth2AuthorizationServerContract"
      ],
      "description": "Parameters supplied to the CreateOrUpdate Authorization Server operation."
    },
    "RegionContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Region name."
        },
        "isMasterRegion": {
          "type": "boolean",
          "description": "whether Region is the master region."
        }
      },
      "required": [
        "name",
        "isMasterRegion"
      ],
      "description": "Region profile."
    },
    "RegionListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegionContract"
          },
          "description": "List of Regions."
        }
      },
      "description": "List Regions operation response details."
    },
    "ReportRecordContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name depending on report endpoint specifies product, API, operation or developer name."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "description": "Length of agregation period."
        },
        "country": {
          "type": "string",
          "description": "Country to which this record data is related."
        },
        "region": {
          "type": "string",
          "description": "Country region to which this record data is related."
        },
        "zip": {
          "type": "string",
          "description": "Zip code to which this record data is related."
        },
        "userId": {
          "readOnly": true,
          "type": "string",
          "description": "User identifier path. /users/{userId}"
        },
        "productId": {
          "readOnly": true,
          "type": "string",
          "description": "Product identifier path. /products/{productId}"
        },
        "apiId": {
          "type": "string",
          "description": "API identifier path. /apis/{apiId}"
        },
        "operationId": {
          "type": "string",
          "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}"
        },
        "apiRegion": {
          "type": "string",
          "description": "API region identifier."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Subscription identifier path. /subscriptions/{subscriptionId}"
        },
        "callCountSuccess": {
          "type": "integer",
          "format": "int32",
          "description": "Number of succesful calls."
        },
        "callCountBlocked": {
          "type": "integer",
          "format": "int32",
          "description": "Number of calls blocked due to invalid credentials."
        },
        "callCountFailed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of calls failed due to proxy or backend errors."
        },
        "callCountOther": {
          "type": "integer",
          "format": "int32",
          "description": "Number of other calls."
        },
        "callCountTotal": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of calls."
        },
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth consumed."
        },
        "cacheHitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times when content was served from cache policy."
        },
        "cacheMissCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of times content was fetched from backend."
        },
        "apiTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Average time it took to process request."
        },
        "apiTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum time it took to process request."
        },
        "apiTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum time it took to process request."
        },
        "serviceTimeAvg": {
          "type": "number",
          "format": "double",
          "description": "Average time it took to process request on backend."
        },
        "serviceTimeMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum time it took to process request on backend."
        },
        "serviceTimeMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum time it took to process request on backend."
        }
      },
      "description": "Report data."
    },
    "ReportPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportRecordContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Report records list representation."
    },
    "AccessInformationContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier."
        },
        "primaryKey": {
          "type": "string",
          "description": "Primary access key."
        },
        "secondaryKey": {
          "type": "string",
          "description": "Secondary access key."
        },
        "enabled": {
          "type": "boolean",
          "description": "Tenant access information of the Api Management service."
        }
      },
      "description": "Tenant access information contract of the Api Management service."
    },
    "AccessInformationUpdateParameters": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Tenant access information of the Api Management service."
        }
      },
      "required": [
        "enabled"
      ],
      "description": "Tenant access information update parameters of the Api Management service."
    },
    "LoggerGetContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Logger identifier in form /loggers/{loggerId}"
        },
        "type": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type"
      ],
      "description": "Logger."
    },
    "LoggerPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoggerGetContract"
          },
          "description": "Logger values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Logger list representation."
    },
    "LoggerCreateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type",
        "credentials"
      ],
      "description": "Parameters supplied to the Create Logger operation."
    },
    "LoggerUpdateParameters": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Logger type.",
          "enum": [
            "AzureEventHub"
          ],
          "x-ms-enum": {
            "name": "LoggerTypeContract",
            "modelAsString": false
          }
        },
        "description": {
          "type": "string",
          "description": "Logger description."
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Logger credentials."
        },
        "isBuffered": {
          "type": "boolean",
          "description": "whether records are buffered in the logger before publishing. Default is assumed to be true."
        }
      },
      "required": [
        "type"
      ],
      "description": "Parameters supplied to the Update Logger operation."
    },
    "PropertyContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Property identifier path."
        },
        "name": {
          "type": "string",
          "description": "Unique name of Property.",
          "minLength": 1,
          "maxLength": 256
        },
        "value": {
          "type": "string",
          "description": "The Value of the Property.",
          "minLength": 1,
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "The value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Property details."
    },
    "PropertyPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Property list representation."
    },
    "PropertyCreateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of Property.",
          "maxLength": 256,
          "minLength": 1
        },
        "value": {
          "type": "string",
          "description": "The Value of the Property.",
          "minLength": 1,
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "The value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Parameters supplied to the Create Property operation."
    },
    "PropertyUpdateParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of Property.",
          "minLength": 1,
          "maxLength": 256
        },
        "value": {
          "type": "string",
          "description": "The Value of the Property.",
          "minLength": 1,
          "maxLength": 4096
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of tags associated with a property."
        },
        "secret": {
          "type": "boolean",
          "description": "The value which determines the value should be encrypted or not. Default value is false."
        }
      },
      "description": "Parameters supplied to the Update Property operation."
    },
    "OpenidConnectProviderContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "OpenID Connect Provider identifier."
        },
        "name": {
          "type": "string",
          "description": "User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        }
      },
      "required": [
        "name",
        "metadataEndpoint",
        "clientId"
      ],
      "description": "OpenID Connect Providers Contract."
    },
    "OpenIdConnectProviderPaged": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenidConnectProviderContract"
          },
          "description": "Page values."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Total records count number."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged OpenIdProviders list representation."
    },
    "OpenidConnectProviderCreateContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        }
      },
      "required": [
        "name",
        "metadataEndpoint",
        "clientId"
      ],
      "description": "Parameters supplied to the Create OpenID Connect Provider operation."
    },
    "OpenidConnectProviderUpdateContract": {
      "properties": {
        "name": {
          "type": "string",
          "description": "User-friendly OpenID Connect Provider name.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "User-friendly description of OpenID Connect Provider."
        },
        "metadataEndpoint": {
          "type": "string",
          "description": "Metadata endpoint URI."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID of developer console which is the client application."
        },
        "clientSecret": {
          "type": "string",
          "description": "Client Secret of developer console which is the client application."
        }
      },
      "description": "Parameters supplied to the Update OpenID Connect Provider operation."
    },
    "DeployConfigurationParameters": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the Git branch from which the configuration is to be deployed to the configuration database."
        },
        "force": {
          "type": "boolean",
          "description": "The value enforcing deleting subscriptions to products that are deleted in this update."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Deploy Configuration operation."
    },
    "TenantLongRunningOperationResult": {
      "properties": {
        "operationStatusLink": {
          "type": "string",
          "description": "operation status link."
        },
        "retryAfter": {
          "type": "integer",
          "format": "int32",
          "description": "The number of minutes to retry the operation after."
        },
        "status": {
          "type": "string",
          "description": "Current status of the operation.",
          "enum": [
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "Continue",
            "OK",
            "Created",
            "Accepted",
            "NotFound",
            "Conflict"
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "modelAsString": false
          }
        },
        "requestId": {
          "type": "string"
        }
      },
      "description": "A standard service response for long running tenant operations."
    },
    "ErrorFieldContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Property level error code."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of property-level error."
        },
        "target": {
          "type": "string",
          "description": "Property name."
        }
      },
      "description": "Error Field contract."
    },
    "ErrorBodyContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorFieldContract"
          },
          "description": "The list of invalid fields send in request, in case of validation error."
        }
      },
      "description": "Error Body contract."
    },
    "OperationResultContract": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Operation result identifier."
        },
        "status": {
          "type": "string",
          "description": "Status of an async operation.",
          "enum": [
            "Started",
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "AsyncOperationState",
            "modelAsString": false
          }
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "resultInfo": {
          "type": "string",
          "description": "Optional result info."
        },
        "error": {
          "$ref": "#/definitions/ErrorBodyContract"
        }
      },
      "description": "Operation Result."
    },
    "SaveConfigurationParameter": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the Git branch in which to commit the current configuration snapshot."
        },
        "force": {
          "type": "boolean",
          "description": "The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten."
        }
      },
      "required": [
        "branch"
      ],
      "description": "Parameters supplied to the Save Tenant Configuration operation."
    },
    "TenantConfigurationSyncStateContract": {
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of Git branch."
        },
        "commitId": {
          "type": "string",
          "description": "The latest commit Id."
        },
        "isExport": {
          "type": "boolean",
          "description": "value indicating if last sync was save (true) or deploy (false) operation."
        },
        "isSynced": {
          "type": "boolean",
          "description": "value indicating if last synchronization was later than the configuration change."
        },
        "isGitEnabled": {
          "type": "boolean",
          "description": "value indicating whether Git configuration access is enabled."
        },
        "syncDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "configurationChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        }
      },
      "description": "Tenant Configuration Synchronization State."
    },
    "ErrorResponse": {
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string"
        },
        "message": {
          "description": "Error message indicating why the operation failed.",
          "type": "string"
        }
      },
      "description": "Error Response."
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Version of the API to be used with the client request."
    },
    "ServiceNameParameter": {
      "name": "serviceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the Api Management service.",
      "minLength": 1,
      "maxLength": 50,
      "pattern": "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$",
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group.",
      "x-ms-parameter-location": "method"
    },
    "ApiIdParameter": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "API identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "ProductIdParameter": {
      "name": "productId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Product identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "GroupIdParameter": {
      "name": "groupId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Group identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "UserIdParameter": {
      "name": "uid",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "User identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    }
  }
}